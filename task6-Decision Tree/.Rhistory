salesNewUSD
# combine two currencies(only digits)
wholeSales <- c(salesNewGBP, salesNewUSD)
wholeSales
# use: to_currency, to transform the value from digits to currency value
wholeSalesNew <- to_currency(wholeSales, currency_symbol = "$", symbol_first = TRUE,
group_size = 4, group_delim = ",", decimal_size = 2,
decimal_delim = ".")
wholeSalesNew
wholeSales
wholeSales %>% summarise(mean = mean(wholeSales),
maximu = max(wholeSales),
minimum = min(wholeSales))
wholeSales
wholeSales %>%
summarise(mean = mean(wholeSales),
maximu = max(wholeSales),
minimum = min(wholeSales))
wholeSales %>%
summary(mean = mean(wholeSales),
maximu = max(wholeSales),
minimum = min(wholeSales))
max(wholeSales)
wholeSales %>%
mutate(mean = mean(wholeSales),
maximum = max(wholeSales),
minimum = min(wholeSales))
library(tidyverse)
library(lucr)
wholeSales %>%
mutate(mean = mean(wholeSales),
maximum = max(wholeSales),
minimum = min(wholeSales))
wholeSales %>%
summarise(mean = mean(wholeSales),
maximum = max(wholeSales),
minimum = min(wholeSales))
max(wholeSales)
# combine two currencies(only digits)
wholeSales <- unite(salesNewGBP, salesNewUSD)
salesNewUSD
# combine two currencies(only digits)
wholeSales <- unite(salesNewGBP, salesNewUSD)
# combine two currencies(only digits)
wholeSales <- c(salesNewGBP, salesNewUSD)
wholeSales
wholeSales %>%
summarise(mean = mean(wholeSales),
maximum = max(wholeSales),
minimum = min(wholeSales))
max(wholeSalesNew)
wholeSalesNew %>%
summarise(mean = mean(wholeSales),
maximum = max(wholeSales),
minimum = min(wholeSales))
holeSalesNew %>%
summarise(mean = mean(wholeSalesNew),
maximum = max(wholeSalesNew),
minimum = min(wholeSalesNew))
wholeSalesNew %>%
summarise(mean = mean(wholeSalesNew),
maximum = max(wholeSalesNew),
minimum = min(wholeSalesNew))
wholeSalesNew %>%
mutate(mean = mean(wholeSalesNew),
maximum = max(wholeSalesNew),
minimum = min(wholeSalesNew))
wholeSalesNew %>%
summarise(mean = mean(wholeSalesNew),
maximum = max(wholeSalesNew),
minimum = min(wholeSalesNew))
wholeSalesNew %>%
group_by() %>%
summarise(mean = mean(wholeSalesNew),
maximum = max(wholeSalesNew),
minimum = min(wholeSalesNew))
wholeSalesNew %>%
group_by("$") %>%
summarise(mean = mean(wholeSalesNew),
maximum = max(wholeSalesNew),
minimum = min(wholeSalesNew))
wholeSalesNew %>%
summarise(mean = mean(wholeSalesNew),
maximum = max(wholeSalesNew),
minimum = min(wholeSalesNew))
max(wholeSalesNew)
mean(wholeSalesNew)
min(wholeSalesNew)
wholeSalesNew %>%
summarise(maximum = max(wholeSalesNew),
minimum = min(wholeSalesNew))
max(wholeSalesNew)
min(wholeSalesNew)
median(wholeSalesNew)
median(wholeSales)
max(wholeSales)
min(wholeSales)
wholeSales %>%
summarise(maximum = max(wholeSales),
minimum = min(wholeSales))
filter(wholeSales > 1000)
?barplot
#?barplot
?histogram
#?barplot
?piechart
?barplot
barplot(bad_drivers[order(bad_drivers, decreasing = TRUE)])
bad_drivers <- read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/bad-drivers/bad-drivers.csv")
# change the variable name to simple edition: nums, speeding, alcohol, not_distracted, first_collision and insurance_company_loses
bad_drivers <- select(bad_drivers, State, nums= Number.of.drivers.involved.in.fatal.collisions.per.billion.miles,
speeding = Percentage.Of.Drivers.Involved.In.Fatal.Collisions.Who.Were.Speeding,
alcohol = Percentage.Of.Drivers.Involved.In.Fatal.Collisions.Who.Were.Alcohol.Impaired,
not_distracted = Percentage.Of.Drivers.Involved.In.Fatal.Collisions.Who.Were.Not.Distracted,
first_collision = Percentage.Of.Drivers.Involved.In.Fatal.Collisions.Who.Had.Not.Been.Involved.In.Any.Previous.Accidents,
insurance_company_loses = Losses.incurred.by.insurance.companies.for.collisions.per.insured.driver.... )
library(dplyr)
library(ggplot2)
# list the original variable names
colnames(bad_drivers)
# change the variable name to simple edition: nums, speeding, alcohol, not_distracted, first_collision and insurance_company_loses
bad_drivers <- select(bad_drivers, State, nums= Number.of.drivers.involved.in.fatal.collisions.per.billion.miles,
speeding = Percentage.Of.Drivers.Involved.In.Fatal.Collisions.Who.Were.Speeding,
alcohol = Percentage.Of.Drivers.Involved.In.Fatal.Collisions.Who.Were.Alcohol.Impaired,
not_distracted = Percentage.Of.Drivers.Involved.In.Fatal.Collisions.Who.Were.Not.Distracted,
first_collision = Percentage.Of.Drivers.Involved.In.Fatal.Collisions.Who.Had.Not.Been.Involved.In.Any.Previous.Accidents,
insurance_company_loses = Losses.incurred.by.insurance.companies.for.collisions.per.insured.driver.... )
head(bad_drivers)
# summary
summary(bad_drivers)
barplot(bad_drivers[order(bad_drivers, decreasing = TRUE)])
barplot(bad_drivers[order(bad_drivers$nums, decreasing = TRUE)])
ggplot(bad_drivers, aes(x=State, y=(speeding))) +
geom_bar(stat="identity", fill="royalblue") +
coord_flip()
barplot(bad_drivers$State[order(bad_drivers$nums, decreasing = TRUE)])
# use attach() function to aviod of keep typing '$'
attach(bad_drivers)
barplot(nums)
barplot(State[order(nums, decreasing = TRUE)])
barplot(nums[order(State, decreasing = TRUE)])
barplot(nums)
barplot(nums[order(State, decreasing = TRUE)])
barplot(nums)
barplot(nums[order(State, decreasing = TRUE)])
barplot(nums[order(decreasing = TRUE)])
barplot(nums[order(decreasing = TRUE)])
barplot(nums[order(nums, decreasing = TRUE)])
?barplot
barplot(nums[order(nums, decreasing = TRUE)])
par(oma = c(1,1,1,1))
par(mar = c(4,5,2,1))
barplot(nums[order(nums)],
horiz = TRUE,
las = 1,
col = c(State)
border = NA,
)
barplot(nums[order(nums)],
horiz = TRUE,
las = 1,
col = c(State),
border = NA)
# LOAD DATASETS PACKAGE
require("datasets")
# ONE ROW PER CASE
?chickwts
chickwts  # Look at data
# Quickest Method
plot(chickwts$feed)  # Plot feed from chickwts
# "barplot" offers more control but must prepare data:
# R doesn't create bar charts directly from the categorical
# variables; instead, we must first create a table that
# has the frequencies for each level of the variable.
feeds <- table(chickwts$feed)
feeds
barplot(feeds[order(feeds)],
horiz  = TRUE,
las    = 1,  # las gives orientation of axis labels
col    = c("beige", "blanchedalmond", "bisque1", "bisque2", "bisque3", "bisque4"),
border = NA,  # No borders on bars
main   = "Frequencies of Different Feeds\nin chickwts Dataset",  # \n = line break
xlab   = "Number of Chicks")
?par
rm(list = ls())  # Clean up
data(bad_drivers)
bad_drivers <- read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/bad-drivers/bad-drivers.csv")
data(bad_drivers)
require("dataset")
require("datasets")
# Plot fancy decision tree(DT)
fancyRPartPlot(rpart1,main = "Iris")
install.packages("RGtk2")
q()
library(rattle)
rattle()
#install.packages("rattle")
install.packages("RGtk2")
install.packages("rattle")
q()
library(rattle)
library(RGtk2)
install.packages("RGtk2",dependencies=TRUE)
install.packages("rattle",dependencies=TRUE)
q()
amzn <- read.csv("AMZN.csv", TRUE, ",")
head(amzn)
#e2
amzn_ts <- ts(rev(amzn$Close), frequency = 12, start = c(2008,3))
amzn_ts
plot.ts(amzn_ts)
amzn_tsSMA3 = SMA(amzn_ts, n=3)
plot(amzn_tsSMA3)
#e3
amzn_closing_log <- log(amzn_ts)
amzn_closing_log
plot(amzn_closing_log)
#e4
amzn_ts_decompose <- decompose(amzn_ts)
plot(amzn_ts_decompose)
#e5
amzn_smooth <- HoltWinters(amzn_ts, gamma = F)
amzn_smooth
amzn_forecast <- forecast(amzn_smooth)
plot(amzn_forecast)
library("readr")
library("forecast")
library("dplyr")
library("TTR")
#e1
amzn <- read.csv("AMZN.csv", TRUE, ",")
#*************************************** No.4 Time Series(TS) ***************************************************
setwd("/Users/Alexpower/Desktop/R/task4")
#e1
amzn <- read.csv("AMZN.csv", TRUE, ",")
head(amzn)
#e2
amzn_ts <- ts(rev(amzn$Close), frequency = 12, start = c(2008,3))
amzn_ts
plot.ts(amzn_ts)
amzn_tsSMA3 = SMA(amzn_ts, n=3)
plot(amzn_tsSMA3)
#e3
amzn_closing_log <- log(amzn_ts)
amzn_closing_log
plot(amzn_closing_log)
#e4
amzn_ts_decompose <- decompose(amzn_ts)
plot(amzn_ts_decompose)
#e5
amzn_smooth <- HoltWinters(amzn_ts, gamma = F)
amzn_smooth
amzn_forecast <- forecast(amzn_smooth)
plot(amzn_forecast)
#e4
amzn_ts_decompose <- decompose(amzn_ts)
plot(amzn_ts_decompose)
#seasional
amzn_seasional_decompose <- amzn - amzn_ts_decompose$seasonal
#seasional
amzn_seasional_decompose <- amzn_ts - amzn_ts_decompose$seasonal
plot(amzn_seasional_decompose)
#seasional
amzn_seasionaAdj <- amzn_ts - amzn_ts_decompose$seasonal
plot(amzn_seasionaAdj)
#e4
amzn_ts_decompose <- decompose(amzn_ts)
plot(amzn_ts_decompose)
#seasional
amzn_seasionaAdj <- amzn_ts - amzn_ts_decompose$seasonal
plot(amzn_seasionaAdj)
#e5
amzn_smooth <- HoltWinters(amzn_ts, gamma = F)
amzn_smooth
amzn_forecast <- forecast(amzn_smooth)
plot(amzn_forecast)
#seasional
amzn_seasionaAdj <- amzn_ts - amzn_ts_decompose$seasonal
plot(amzn_seasionaAdj)
#seasional
amzn_seasionaAdj <- amzn_ts - amzn_ts_decompose$random
plot(amzn_seasionaAdj)
#seasional
amzn_seasionaAdj <- amzn_ts - amzn_ts_decompose$type
#seasional
amzn_seasionaAdj <- amzn_ts - amzn_ts_decompose$figure
plot(amzn_seasionaAdj)
#seasional
amzn_seasionaAdj <- amzn_ts - amzn_ts_decompose$seasonal
plot(amzn_seasionaAdj)
#seasional
amzn_seasionaAdj <- amzn_ts - amzn_ts_decompose$trend
plot(amzn_seasionaAdj)
#e4
amzn_ts_decompose <- decompose(amzn_ts)
plot(amzn_ts_decompose)
#seasional
amzn_seasionaAdj <- amzn_ts - amzn_ts_decompose$trend
plot(amzn_seasionaAdj)
#seasional
amzn_seasionaAdj <- amzn_ts - amzn_ts_decompose$seasonal
plot(amzn_seasionaAdj)
#e4
amzn_ts_decompose <- decompose(amzn_ts)
plot(amzn_ts_decompose)
#seasional
amzn_seasionaAdj <- amzn_ts - amzn_ts_decompose$trend
plot(amzn_seasionaAdj)
#seasional
amzn_seasionaAdj <- amzn_ts - amzn_ts_decompose$seasonal
plot(amzn_seasionaAdj)
#*************************************** No.6 Predictive analytics: Decision Tree ***************************************************
library(ggplot2)
data(iris)
head(iris)
dim(iris)
table(iris$Species)
attach(iris)
qplot(Petal.Width, Sepal.Width, data = iris, color = Species)
qplot(Petal.Width, Sepal.Width, data = iris, color = Species, size = I(4))
qplot(Petal.Width, Sepal.Width, data = iris, color = Species, size = I(2))
install.packages("tree")
library(tree)
tree1 <- tree(Species ~ Sepal.Width + Petal.Width, data = iris)
plot(tree)
plot(tree2)
plot(tree1)
text(tree1)
text(tree1, pretty = 0)
text(tree1, pretty = 0)
text(tree1)
plot(tree1)
text(tree1)
# plot the split
plot(Petal.Width,Sepal.Width,pch=19,color= as.numeric(Species))
# plot the split
plot(Petal.Width,Sepal.Width,pch=19,color= as.numeric(iris$Species))
# plot the split
plot(iris$Petal.Width,iris$Sepal.Width,pch=19,color= as.numeric(iris$Species))
# plot the split
plot(iris$Petal.Width,iris$Sepal.Width,pch=19,col= as.numeric(iris$Species))
# plot the split
plot(iris$Petal.Width,iris$Sepal.Width,pch=19,color= as.numeric(iris$Species))
# plot the split
plot(iris$Petal.Width,iris$Sepal.Width,pch=19,colour= as.numeric(iris$Species))
# plot the split
plot(iris$Petal.Width,iris$Sepal.Width,pch=19,col= as.numeric(iris$Species))
# plot the split
plot(iris$Petal.Width,iris$Sepal.Width,pch=19,col= as.numeric(Species))
# plot the split
plot(Petal.Width,Sepal.Width,pch=19,col= as.numeric(Species))
legend(1.75,4.5,lengend = unique(Species), col = unique(as.numeric(Species)),pch = 19)
partition.tree(tree1, label = "Species",add = T )
legend(1.75,4.5,lengend = unique(Species), col = unique(as.numeric(Species)),pch = 19)
legend(1.75,4.5,legend = unique(Species), col = unique(as.numeric(Species)),pch = 19)
# plot the split
plot(Petal.Width,Sepal.Width,pch=19,col= as.numeric(Species))
# plot the split
plot(Petal.Width,Sepal.Width,pch=29,col= as.numeric(Species))
# plot the split
plot(Petal.Width,Sepal.Width,pch=9,col= as.numeric(Species))
# plot the split
plot(Petal.Width,Sepal.Width,pch=11,col= as.numeric(Species))
# plot the split
plot(Petal.Width,Sepal.Width,pch=18,col= as.numeric(Species))
# plot the split
plot(Petal.Width,Sepal.Width,pch=14,col= as.numeric(Species))
# plot the split
plot(Petal.Width,Sepal.Width,pch=19,col= as.numeric(Species))
Species
# plot the split
plot(Petal.Width,Sepal.Width,pch=19,col= Species)
partition.tree(tree1, label = "Species",add = T )
legend(1.75,4.5,legend = unique(Species), col = unique(as.numeric(Species)),pch = 19)
legend(1.75,4.5,legend = unique(Species), col = unique(Species),pch = 19)
legend(1.75,4.5,legend = Species, col = unique(Species),pch = 19)
legend(1.75,4.5,legend = Species, col = Species,pch = 19)
unique(
legend(1.75,4.5,legend = unique(Species), col = unique(Species),pch = 19)
# plot the split
plot(Petal.Width,Sepal.Width,pch=19,col= Species)
Species
# plot the split
plot(Petal.Width,Sepal.Width,pch=19,col= Species)
partition.tree(tree1, label = "Species",add = T )
legend(1.75,4.5,legend = unique(Species), col = unique(Species),pch = 19)
legend(1,4.5,legend = unique(Species), col = unique(Species),pch = 19)
legend(1.75,4.5,legend = unique(Species), col = unique(Species),pch = 19)
plot(Petal.Width,Sepal.Width,pch=19,col= Species)
partition.tree(tree1, label = "Species",add = T )
legend(1.75,4.5,legend = unique(Species), col = unique(Species),pch = 19)
plot(Petal.Width,Sepal.Width,pch=19,col= Species)
partition.tree(tree1, label = "Species",add = T )
legend(2,4.5,legend = unique(Species), col = unique(Species),pch = 19)
legend(1.5,4.5,legend = unique(Species), col = unique(Species),pch = 19)
legend(1.5,4.3,legend = unique(Species), col = unique(Species),pch = 19)
legend(1.5,4.6,legend = unique(Species), col = unique(Species),pch = 19)
legend(1.75,4.6,legend = unique(Species), col = unique(Species),pch = 19)
legend(1.85,4.6,legend = unique(Species), col = unique(Species),pch = 19)
plot(Petal.Width,Sepal.Width,pch=19,col= Species)
partition.tree(tree1, label = "Species",add = T )
legend(1.85,4.6,legend = unique(Species), col = unique(Species),pch = 19)
plot(tree1)
text(tree1)
Species
# plot the split
plot(Petal.Width,Sepal.Width,pch=19,col= Species)
partition.tree(tree1, label = "Species",add = T )
legend(1.85,4.6,legend = unique(Species), col = unique(Species))
legend(1.85,4.6,legend = unique(Species), col = unique(Species), pch = 10)
legend(1.85,4.6,legend = unique(Species), col = unique(Species), pch = 19)
?pch
table(pruned.prediction, test.set$outlook)
golf_play <- data.frame(outlook, humidity, windy, play)
library(tree)
set.seed(101)
alpha <- 0.7
inTrain <- sample(1:ncol(golf_play), alpha*ncol(golf_play))
train.set <- golf_play[inTrain,]
test.set <- golf_play[-inTrain,]
tree.model <- tree(play ~ humidity + outlook, data = train.set)
tree.model2 <- tree(play ~ humidity + outlook, data = test.set)
#tree.model2 <- tree(play ~ outlook + humidity, data = test.set)
tree.model
tree.model2
plot(tree.model)
text(tree.model)
plot(tree.model2)
text(tree.model2, pretty = 0)
predictions <-predict(tree.model,test.set)  # give the probability to each class
head(predictions)
# point the predictions
# Let's translate the probability output to categorical output
maxidx <- function(arr){
return(which(arr == max(arr)))
}
idx <- apply(predictions, c(1), maxidx)
prediction2 <- c("outlook","humidity")[idx]
# table the predictions
table(prediction2)
summary(tree.model)
summary(tree.model2)
pruned.tree <- prune.tree(tree.model2, best = 3)
plot(pruned.tree)
text(pruned.tree)
pruned.prediction <- predict(pruned.tree, test.set, type = "class")
pruned.prediction
table(pruned.prediction, test.set$outlook)
getwd()
setwd("/Users/Alexpower/Desktop/R/task6/")
getwd()
# Task6 Exercise1:
outlook <- c("rain","overcast","rain","sunny","rain","rain","sunny","overcast",
"overvast","overcast","sunny","sunny","rain","rain","overcast","sunny",
"overcast","overcast","sunny","sunny","sunny","overcast")
outlook <- as.factor(outlook)
outlook
humidity <- c("79","74","80","60","65","79","60","74","77","80","71","70","80","65","70","56","80","70","56","70","71","77")
humidity<- as.numeric(as.character(humidity))
humidity
windy <- c("TRUE","TRUE","FALSE","TRUE","FALSE","TRUE","TRUE","TRUE","TRUE","FALSE"
,"TRUE","FALSE","FALSE","FALSE","TRUE","TRUE","FALSE","TRUE","TRUE","FALSE","TRUE","TRUE")
windy <- as.factor(windy)
windy
play <- c("FALSE","FALSE","TRUE","FALSE","TRUE","FALSE","FALSE","TRUE","TRUE","TRUE","FALSE",
"FALSE","TRUE","TRUE","TRUE","TRUE","TRUE","TRUE","FALSE","TRUE","FALSE","TRUE")
play <- as.factor(play)
play
#humidity
attach(golf_play)
golf_play <- data.frame(outlook, humidity, windy, play)
attach(golf_play)
head(golf_play)
range(humidity)
dim(golf_play)
golf_play <- data.frame(outlook, humidity, windy, play)
library(tree)
set.seed(101)
alpha <- 0.7
inTrain <- sample(1:ncol(golf_play), alpha*ncol(golf_play))
train.set <- golf_play[inTrain,]
test.set <- golf_play[-inTrain,]
tree.model <- tree(play ~ humidity + outlook, data = train.set)
tree.model2 <- tree(play ~ humidity + outlook, data = test.set)
#tree.model2 <- tree(play ~ outlook + humidity, data = test.set)
tree.model
tree.model2
plot(tree.model)
text(tree.model)
plot(tree.model2)
text(tree.model2, pretty = 0)
predictions <-predict(tree.model,test.set)  # give the probability to each class
head(predictions)
maxidx <- function(arr){
return(which(arr == max(arr)))
}
idx <- apply(predictions, c(1), maxidx)
prediction2 <- c("outlook","humidity")[idx]
# table the predictions
table(prediction2)
summary(tree.model)
summary(tree.model2)
pruned.tree <- prune.tree(tree.model2, best = 3)
plot(pruned.tree)
text(pruned.tree)
pruned.prediction <- predict(pruned.tree, test.set, type = "class")
pruned.prediction
table(pruned.prediction, test.set$outlook)
table(pruned.prediction, test.set$windy)
table(pruned.prediction, test.set$outlook)
#rpart.plot(tree_rain_tomorrow)
library(party)
