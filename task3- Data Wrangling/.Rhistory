#mode(sales)
#currency_convert(sales, from = "GBP", to, key,.)
# tidy GBP part (by using: from_currency)
GBPpart <- sales$sale[c(1:100)]
GBPpart
salesNewGBP <-  round(from_currency(GBPpart, decimal_delim = ".") * 1.34,2)
salesNewGBP
# tidy USD part (by using: from_currency)
USDpart <- sales$sale[c(101:200)]
USDpart
salesNewUSD <- round(from_currency(USDpart, decimal_delim = ".")/100,2)
salesNewUSD
# combine two currencies(only digits)
wholeSales <- c(salesNewGBP, salesNewUSD)
wholeSales
# use: to_currency, to transform the value from digits to currency value
wholeSalesNew <- to_currency(wholeSales, currency_symbol = "$", symbol_first = TRUE,
group_size = 4, group_delim = ",", decimal_size = 2,
decimal_delim = ".")
wholeSalesNew
#greater1000 <- wholeSales > 1000 %>% filter("TRUE")
#greater1000
#wholeSales %>% mutate(">1000", ifelse(wholeSales > 1000, "Yes", "No"))
#wholeSalesNew %>%
#  mutate(ifelse(wholeSales > 1000))
#sales %>% filter(sales == "191,13$" )
#head(sales,10)
#rawfile1 <- "/Users/Alexpower/Desktop/dates_for_wrangling.csv"
#dates <- read.csv("/Users/Alexpower/Desktop/dates_for_wrangling.csv", TRUE, ",")
#dates <- read.csv(rawfile1, header = FALSE, col.names = c("date"))
#length(dates$date)
#fixed <- mutate(dates, yyyymmdd = ymd(date), mmddyyyy = mdy(date),
#                ddmmyyyy = dmy(date)) %>% unite("fixedup", yyyymmdd, ddmmyyyy, mmddyyyy
#                                                , sep = "")
#fixed$fixedup <- gsub("NA","", fixed$fixedup)
#fixed
#fixed_md_dm <- fixed %>% mutate(fixedup, month = month(fixedup), day = day(fixedup), to_be_reviewed = day(fixedup) <= 12 & month(fixedup) <= 12)
#fixed_md_dm
install.packages(c("tidyverse", "lucr"))
library(tidyverse)
library(lucr)
rawfile <- "/Users/Alexpower/Desktop/sales.txt"
sales <- read.delim("/Users/Alexpower/Desktop/sales.txt",
stringsAsFactor = FALSE)
sales <- read.delim(rawfile, header = TRUE, col.names = c("sale"))
#length(sales$sale)
#tail(sales,16)
#head(sales,10)
#head(sales,20) %>% mutate(haha = sales > 500)
#summary(sales)
#class(sales)
#mode(sales)
#currency_convert(sales, from = "GBP", to, key,.)
# tidy GBP part (by using: from_currency)
GBPpart <- sales$sale[c(1:100)]
GBPpart
salesNewGBP <-  round(from_currency(GBPpart, decimal_delim = ".") * 1.34,2)
salesNewGBP
# tidy USD part (by using: from_currency)
USDpart <- sales$sale[c(101:200)]
USDpart
salesNewUSD <- round(from_currency(USDpart, decimal_delim = ".")/100,2)
salesNewUSD
# combine two currencies(only digits)
wholeSales <- c(salesNewGBP, salesNewUSD)
wholeSales
# use: to_currency, to transform the value from digits to currency value
wholeSalesNew <- to_currency(wholeSales, currency_symbol = "$", symbol_first = TRUE,
group_size = 4, group_delim = ",", decimal_size = 2,
decimal_delim = ".")
wholeSalesNew
#greater1000 <- wholeSales > 1000 %>% filter("TRUE")
#greater1000
#wholeSales %>% mutate(">1000", ifelse(wholeSales > 1000, "Yes", "No"))
#wholeSalesNew %>%
#  mutate(ifelse(wholeSales > 1000))
#sales %>% filter(sales == "191,13$" )
#head(sales,10)
#rawfile1 <- "/Users/Alexpower/Desktop/dates_for_wrangling.csv"
#dates <- read.csv("/Users/Alexpower/Desktop/dates_for_wrangling.csv", TRUE, ",")
#dates <- read.csv(rawfile1, header = FALSE, col.names = c("date"))
#length(dates$date)
#fixed <- mutate(dates, yyyymmdd = ymd(date), mmddyyyy = mdy(date),
#                ddmmyyyy = dmy(date)) %>% unite("fixedup", yyyymmdd, ddmmyyyy, mmddyyyy
#                                                , sep = "")
#fixed$fixedup <- gsub("NA","", fixed$fixedup)
#fixed
#fixed_md_dm <- fixed %>% mutate(fixedup, month = month(fixedup), day = day(fixedup), to_be_reviewed = day(fixedup) <= 12 & month(fixedup) <= 12)
#fixed_md_dm
install.packages(c("tidyverse","lucr"))
library(tidyverse)
library(lucr)
rawfile <- "/Users/Alexpower/Desktop/sales.txt"
sales <- read.delim("/Users/Alexpower/Desktop/sales.txt",
stringsAsFactor = FALSE)
sales <- read.delim(rawfile, header = TRUE, col.names = c("sale"))
#length(sales$sale)
#tail(sales,16)
#head(sales,10)
#head(sales,20) %>% mutate(haha = sales > 500)
#summary(sales)
#class(sales)
#mode(sales)
# tidy GBP part (by using: from_currency)
GBPpart <- sales$sale[c(1:100)]
GBPpart
salesNewGBP <-  round(from_currency(GBPpart, decimal_delim = ".") * 1.34,2)
salesNewGBP
install.packages(c("tidyverse", "lucr"))
sales <- read.delim(rawfile, header = TRUE, col.names = c("sale"))
# tidy GBP part (by using: from_currency)
GBPpart <- sales$sale[c(1:100)]
GBPpart
GBPpart
salesNewGBP <-  round(from_currency(GBPpart, decimal_delim = ".") * 1.34,2)
salesNewGBP
# tidy GBP part (by using: from_currency) and convert the British Pound to USD by multiplying 1.34, which is the currency rate between GBP and USD
GBPpart <- sales$sale[c(1:100)]
GBPpart
salesNewGBP <-  round(from_currency(GBPpart, decimal_delim = ".") * 1.34,2)
salesNewGBP
# tidy USD part (by using: from_currency)
USDpart <- sales$sale[c(101:200)]
USDpart
salesNewUSD <- round(from_currency(USDpart, decimal_delim = ".")/100,2)
salesNewUSD
# combine two currencies(only digits)
wholeSales <- c(salesNewGBP, salesNewUSD)
wholeSales
# use: to_currency, to transform the value from digits to currency value
wholeSalesNew <- to_currency(wholeSales, currency_symbol = "$", symbol_first = TRUE,
group_size = 4, group_delim = ",", decimal_size = 2,
decimal_delim = ".")
wholeSalesNew
wholeSales
wholeSales %>% summarise(mean = mean(wholeSales),
maximu = max(wholeSales),
minimum = min(wholeSales))
wholeSales
wholeSales %>%
summarise(mean = mean(wholeSales),
maximu = max(wholeSales),
minimum = min(wholeSales))
wholeSales %>%
summary(mean = mean(wholeSales),
maximu = max(wholeSales),
minimum = min(wholeSales))
max(wholeSales)
wholeSales %>%
mutate(mean = mean(wholeSales),
maximum = max(wholeSales),
minimum = min(wholeSales))
library(tidyverse)
library(lucr)
wholeSales %>%
mutate(mean = mean(wholeSales),
maximum = max(wholeSales),
minimum = min(wholeSales))
wholeSales %>%
summarise(mean = mean(wholeSales),
maximum = max(wholeSales),
minimum = min(wholeSales))
max(wholeSales)
# combine two currencies(only digits)
wholeSales <- unite(salesNewGBP, salesNewUSD)
salesNewUSD
# combine two currencies(only digits)
wholeSales <- unite(salesNewGBP, salesNewUSD)
# combine two currencies(only digits)
wholeSales <- c(salesNewGBP, salesNewUSD)
wholeSales
wholeSales %>%
summarise(mean = mean(wholeSales),
maximum = max(wholeSales),
minimum = min(wholeSales))
max(wholeSalesNew)
wholeSalesNew %>%
summarise(mean = mean(wholeSales),
maximum = max(wholeSales),
minimum = min(wholeSales))
holeSalesNew %>%
summarise(mean = mean(wholeSalesNew),
maximum = max(wholeSalesNew),
minimum = min(wholeSalesNew))
wholeSalesNew %>%
summarise(mean = mean(wholeSalesNew),
maximum = max(wholeSalesNew),
minimum = min(wholeSalesNew))
wholeSalesNew %>%
mutate(mean = mean(wholeSalesNew),
maximum = max(wholeSalesNew),
minimum = min(wholeSalesNew))
wholeSalesNew %>%
summarise(mean = mean(wholeSalesNew),
maximum = max(wholeSalesNew),
minimum = min(wholeSalesNew))
wholeSalesNew %>%
group_by() %>%
summarise(mean = mean(wholeSalesNew),
maximum = max(wholeSalesNew),
minimum = min(wholeSalesNew))
wholeSalesNew %>%
group_by("$") %>%
summarise(mean = mean(wholeSalesNew),
maximum = max(wholeSalesNew),
minimum = min(wholeSalesNew))
wholeSalesNew %>%
summarise(mean = mean(wholeSalesNew),
maximum = max(wholeSalesNew),
minimum = min(wholeSalesNew))
max(wholeSalesNew)
mean(wholeSalesNew)
min(wholeSalesNew)
wholeSalesNew %>%
summarise(maximum = max(wholeSalesNew),
minimum = min(wholeSalesNew))
max(wholeSalesNew)
min(wholeSalesNew)
median(wholeSalesNew)
median(wholeSales)
max(wholeSales)
min(wholeSales)
wholeSales %>%
summarise(maximum = max(wholeSales),
minimum = min(wholeSales))
filter(wholeSales > 1000)
library(forecast)
library("dplyr")
library("TTR")
amzn <- read.csv("AMZN.csv", TRUE, ",")
View(AData)
m
amzn <- read.csv("AMZN.csv", TRUE, ",")
getwd()
setwd("/Users/Alexpower/Desktop/R/task4")
getwd()
library(forecast)
library("dplyr")
library("TTR")
amzn <- read.csv("AMZN.csv", TRUE, ",")
View(amzn)
#Task4 Exercise 1 first 6 entires
# method 1
head(amzn,6)
#Task4 Exercise 3
amzn_closing_log <- log(amzn_ts)
plot(amzn_closing_log)
amzn_ts <- ts(rev(amzn$Close), frequency = 12, start = c(2008,3))
amzn_ts
plot.ts(amzn_ts)
#Task4 Exercise 3
amzn_closing_log <- log(amzn_ts)
plot(amzn_closing_log)
#Task4 Exercise 4
amznCompse <- decompose(amzn_ts)
plot(amznCompse)
amznF <- HoltWinters(amzn_ts, beta = F, gamma = F)
amznF
plot(amznF)
plot(amzn_closing_log)
plot(amznF)
plot(amzn_closing_log)
amznF <- HoltWinters(amzn_ts, beta = F, gamma = F)
amznF
plot(amznF)
# method arima
sth <- auto.arima(amzn_ts)
sth
# method arima
sth <- auto.arima(amzn_ts)
sth
sthfc <- forecast(sth, h= 20)
plot(sthfc)
sthfc <- forecast(sth, h= 24)
plot(sthfc)
# for the further prediction
amznFC <- forecast(amznF, h=20)
plot(amznFC)
fitamzn_ts <- auto.arima(amzn_ts)
fitamzn_ts
forecastamzn_ts <- forecast(fitamzn_ts, h= 24)
plot(forecastamzn_ts)
# for the further prediction
amznFC <- forecast(amznF, h=20)
plot(amznFC)
# for the further prediction
amznFC <- forecast(amznF, h=24)
plot(amznFC)
# for the further prediction
amznFC <- forecast(amznF, h=24)
plot(amznFC)
# method ARIMA
fitamzn_ts <- auto.arima(amzn_ts)
fitamzn_ts
plot(amznF)
fitamzn_ts
#Task4 Exercise 5
# method HoltWinters
amznF <- HoltWinters(amzn_ts, beta = F, gamma = F)
amznF
# for the further prediction
amznFC <- forecast(amznF, h=24)
plot(amznFC)
# for the further prediction
# method1: forecast from HoltWinters
amznFC <- forecast(amznF, h=24)
plot(amznFC)
# method2: ARIMA
fitamzn_ts <- auto.arima(amzn_ts)
fitamzn_ts
forecastamzn_ts <- forecast(fitamzn_ts, h= 24)
plot(forecastamzn_ts)
#Task4 Exercise 5
amznF <- HoltWinters(amzn_ts, beta = F, gamma = F)
amznF
plot(amznF)
# for the further prediction
# method1: forecast from HoltWinters
amznFC <- forecast(amznF, h=24)
plot(amznFC)
# method2: ARIMA
fitamzn_ts <- auto.arima(amzn_ts)
fitamzn_ts
forecastamzn_ts <- forecast(fitamzn_ts, h= 24)
plot(forecastamzn_ts)
# for the further prediction
# method1: forecast from HoltWinters
amznFC <- forecast.HoltWinters(amznF, h=24)
plot.forecast(amznFC)
#Task4 Exercise 5
amznF <- HoltWinters(amzn_ts, beta = F, gamma = F)
amznF
plot(amznF)
# for the further prediction
# method1: forecast from HoltWinters
amznFC <- forecast.HoltWinters(amznF, h=24)
plot.forecast(amznFC)
# for the further prediction
# method1: forecast from HoltWinters
amznFC <- forecast(amznF, h=24)
plot(amznFC)
forecastamzn_ts <- forecast(fitamzn_ts, h= 24)
plot(forecastamzn_ts)
fitamzn_ts
fitamzn_tssmooth <- SMA(fitamzn_ts, n=8)
plot(fitamzn_tssmooth)
plot(SMA(forecastamzn_ts, n=3))
forecastamzn_ts <- forecast(fitamzn_ts, h= 24)
plot(SMA(forecastamzn_ts, n=3))
plot(forecastamzn_ts)
forecastamzn_ts <- forecast(fitamzn_ts, h= 24)
plot(forecastamzn_ts)
getwd()
setwd("/Users/Alexpower/Desktop/R/task3")
getwd()
dates <- read.csv("/Users/Alexpower/Desktop/dates_for_wrangling.csv", TRUE, ",")
dates <- read.csv(rawfile, header = FALSE, col.names = c("date"))
length(dates$date)
dates <- read.csv("/Users/Alexpower/Desktop/dates_for_wrangling.csv", TRUE, ",")
dates <- read.csv("/Users/Alexpower/Desktop/R/task3/dates_for_wrangling.csv", TRUE, ",")
dates <- read.csv(rawfile, header = FALSE, col.names = c("date"))
length(dates$date)
dates <- read.csv("dates_for_wrangling.csv", TRUE, ",")
dates <- read.csv(rawfile, header = FALSE, col.names = c("date"))
length(dates$date)
#Exercise_9: You are required to use the data wrangling techniques that you learned to transform the currency data in tidy way.
#You may convert the Pounds into US Dollars.
getwd()
df <- read.table("salesData.txt", encoding = "ASCII", header = TRUE)
df
df2 <- df %>% slice(1:100)
#Exercise_9: You are required to use the data wrangling techniques that you learned to transform the currency data in tidy way.
#You may convert the Pounds into US Dollars.
getwd()
df <- read.table("salesData.txt", encoding = "ASCII", header = TRUE)
df
df2 <- df %>% slice(1:100)
df2
df3 <- df %>% slice(101:200)
df3
library("tidyr")
df3.1 <- separate(df3, col = sales, into = c("money", "unit"), 6)
df3.1
df2.1 <- separate(df2, col = sales, into = c("unit", "money"), 1)
df2.1
#Since the unit of Pounds cannot shows in the data frame, even I change the encoding, so we change the "\u00a3" into "$". Then
#the new data frame shows.
df2.1[df2.1=="\u00a3"]<- "$"
df2.1
#Since we have the new data frame df2.1 and df3.1 then we combine them together.
#Frist combine the unit and money into one column.
df3.2 <- unite(df3.1, col = sales, money, unit, sep = "")
df3.2
df2.2 <- unite(df2.1, col = sales, money, unit, sep = "")
df2.2
#Then we combine to data fram together.
newdf <- rbind(df3.2, df2.2)
newdf
newdf
#Then we combine to data fram together.
newdf <- rbind(df3.2, df2.2)
newdf
#Task3 Exercise 9
getwd()
read.delim("salesData.txt ",FALSE, ",")
#Task3 Exercise 9
getwd()
read.delim("salesData.txt ",FALSE, ",")
read.delim("salesData.txt",FALSE, ",")
rawfile <- "/Users/Alexpower/Desktop/R/task3/salesData.txt"
sales <- read.delim("salesData.txt",
stringsAsFactor = FALSE)
sales <- read.delim(rawfile, header = TRUE, col.names = c("sale"))
# tidy GBP part (by using: from_currency) and convert the British Pound to USD by multiplying 1.34, which is the currency rate between GBP and USD
GBPpart <- sales$sale[c(1:100)]
GBPpart
salesNewGBP <-  round(from_currency(GBPpart, decimal_delim = ".") * 1.34,2)
salesNewGBP
# tidy USD part (by using: from_currency)
USDpart <- sales$sale[c(101:200)]
USDpart
salesNewUSD <- round(from_currency(USDpart, decimal_delim = ".")/100,2)
salesNewUSD
library(tidyverse)
library(lucr)
salesNewGBP <-  round(from_currency(GBPpart, decimal_delim = ".") * 1.34,2)
salesNewGBP
# tidy USD part (by using: from_currency)
USDpart <- sales$sale[c(101:200)]
USDpart
salesNewUSD <- round(from_currency(USDpart, decimal_delim = ".")/100,2)
salesNewUSD
# combine two currencies(only digits)
wholeSales <- c(salesNewGBP, salesNewUSD)
wholeSales
#max(wholeSales)
#min(wholeSales)
# use: to_currency, to transform the value from digits to currency value
wholeSalesNew <- to_currency(wholeSales, currency_symbol = "$", symbol_first = TRUE,
group_size = 4, group_delim = ",", decimal_size = 2,
decimal_delim = ".")
wholeSalesNew <- to_currency(wholeSales, currency_symbol = "$", symbol_first = TRUE,
group_size = 4, group_delim = ",", decimal_size = 2,
decimal_delim = ".")
wholeSalesNew
# for the further prediction
# method1: forecast from HoltWinters
amznFC <- forecast:::HoltWinters(amznF, h=24)
plot.forecast(amznFC)
# for the further prediction
# method1: forecast from HoltWinters
amznFC <- forecast:::HoltWinters(amznF, h=24)
# for the further prediction
# method1: forecast from HoltWinters
amznFC <- forecast:::HoltWinters(amznF)
plot(amznF)
plot(amznFC)
# for the further prediction
# method1: forecast from HoltWinters
amznFC <- forecast:::HoltWinters(amznF, h=24)
plot(amznFC)
amznF;
amznF$SSE
plot(amznF)
# for the further prediction
# method1: forecast from HoltWinters
amznFC <- forecast:::HoltWinters(amznF, h=24)
library(forecast)
library("dplyr")
library("TTR")
# for the further prediction
# method1: forecast from HoltWinters
amznFC <- forecast:::HoltWinters(amznF, h=24)
# for the further prediction
# method1: forecast from HoltWinters
amznFC <- forecast:::forecast.HoltWinters(amznF, h=24)
plot(amznFC)
plot.forecast(amznFC)
# for the further prediction
# method1: forecast from HoltWinters
amznFC <- forecast:::forecast.HoltWinters(amznF, h=24)
plot.forecast(amznFC)
# for the further prediction
# method1: forecast from HoltWinters
amznFC <- forecast:::forecast.HoltWinters(amznF, h=24)
plot(amznFC)
# for the further prediction
# method1: forecast from HoltWinters
amznFC <- forecast(amznF, h=24)
plot(amznFC)
amznF$SSE
amznF;
amznF$SSE
plot(amznF)
amznF <- HoltWinters(amzn_ts, beta = F, gamma = F)
amznF;
#amznF$SSE
plot(amznF)
fitamzn_ts <- auto.arima(amzn_ts)
fitamzn_ts
forecastamzn_ts <- forecast(fitamzn_ts, h= 24)
plot(forecastamzn_ts)
amznF <- HoltWinters(amzn_ts, beta = F, gamma = F)
amznF
plot(amznF)
amznFC <- forecast:::HoltWinters(amznF)
plot.forecast(amznFC)
# method2: ARIMA
fitamzn_ts <- auto.arima(amzn_ts)
fitamzn_ts
forecastamzn_ts <- forecast(fitamzn_ts, h= 24)
plot(forecastamzn_ts)
